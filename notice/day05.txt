
class(User_data Type)=속성(값)+메소드(기능)
ex) System.out.println("11"); > 반복문, 제어문 > 나의반복문()_기능;

class 원칙 : 멤버 (상수,변수, (이너클래스) / 메소드(생성자, 메소드) 등등...)
		* 은닉된 멤버변수에게 오픈된(public) 메소드를 통해 값을 전달 및 변경(void형 setter) 하고 리턴(return형 getter)하는 구조
		
===========================================================================================================

1. java의 static void형 메소드를 ㅜ현 할 수 있다.
2. static void형 메소드의 원형을 설명할 수 있다.
3. static return형 메소드를 구현 할 수 있다.
4. API의 static void와 return형 메소드를 호출 할 수 있다.

static 	/	non_static
void	/	return

static_return형 : 메소드를 호출하게 되면 return키워드를 통해 값을 리턴하는 구조를 가진다. 
	[형식]
		접근제한자(public private default) static datatype User_Name(object...args){
			//code
			return datatype_value;
		}
	[호출하는 방법]
		datatype 변수 = User_Name(object...args);
		
	ex)
		int rest = getRes(); // 정수 100을 리턴하는 getRes()메소드  return 100;
		System.out.println(res); //100
		
		public static int getRes(){
			return 100;
		}
		
		
		float f = getF();	//	return 98.7f;
		System.out.println(f); 	//	98.7f
		
		public static float getF(){
			return 98.7;
		}

===========================================================================================================

1. 상수를 선언 할 수 있다. 
2. non-static void형 메소드를 구현할 수 있다. 
3. non-static return형 메소드를 구현할 수 있다.
4. 생성자를 설명할 수 있다. (객체생성시[new] 멤버변수를 초기화 하는 기능)

===========================================================================================================

class 생성자란 ? 
	1.  클래스 이름과 동일 하되 반환형은 없다.
	2.  모든 접근 지정자를 사용할 수 있다.
	3.  기본은 public으로 지정한다. 
	4.  생성자는 원형은 method이지만 반환형이 없기 때문에 method처럼 호출할 수 없다.
	5.  객체를 생성할 때 단 하번만 호출되며 new 연산자와 함께 사용된다.
	6.  생성자는 overload할 수 있다.
	7.  생성자는 상속되지 않는다.
	8.  생성자 간의 호출은 this()라는 키워드로 한다.
	9.  생성자의 ㅁ고적은 객체 생성 후 멤버 변수 초기화에 있다.
	10. 생성자를 명시하지 않으면 ()안에 매개인자가 없는 default 생성자가 제공된다. 
	11. 생성자를 명시하게 되면 명시된 생성자만 호출되어 진다.

===========================================================================================================

번외편
	콘솔을 통해 데이터를 받는 방법
		1. main args : 클래스를 실행할 때 main을 통해서 값을 전달
		2. java.io : Stream을 통해서 값을 전달
		3. java.util : Scanner 를 통해서 값을 전달
		
===========================================================================================================

첫주 진도 정리 
1. java file 작성 
2. IDE java file 작성  _ class 실행 _ java.lang.System.out
3. 값, literal, 기본자료형, 참조형
4. 참조형 (method), static void = java.io.PrintStream.Println
5. static return = Integer, Math














